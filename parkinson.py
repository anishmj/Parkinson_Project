# -*- coding: utf-8 -*-
"""Parkinson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ay0XeJqrSHuBpOUVKC_eBdrKqZg248Ad
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.ensemble import VotingClassifier

# loading the data from csv file to a Pandas DataFrame
parkinsons_data = pd.read_csv('parkinsons.csv')

# separating the features and target
X = parkinsons_data.drop(columns=['name', 'status'], axis=1)
Y = parkinsons_data['status']

# splitting the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# applying PCA for dimensionality reduction
pca = PCA(n_components=10)  # You can adjust the number of components
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

# define the models
svm_model = svm.SVC(kernel='linear', probability=True)  # SVM with probability estimates
rf_model = RandomForestClassifier(n_estimators=100, random_state=2)  # Random Forest model

# hybrid model using voting classifier
hybrid_model = VotingClassifier(estimators=[
    ('svm', svm_model),
    ('rf', rf_model)
], voting='soft')  # 'soft' voting averages probabilities

# training the hybrid model on the training data
hybrid_model.fit(X_train_pca, Y_train)

# accuracy score on training data
X_train_prediction = hybrid_model.predict(X_train_pca)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score on training data: ', training_data_accuracy)

# accuracy score on test data
X_test_prediction = hybrid_model.predict(X_test_pca)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score on test data: ', test_data_accuracy)

# prediction on new data
input_data = (197.07600, 206.89600, 192.05500, 0.00289, 0.00001, 0.00166, 0.00168, 0.00498,
              0.01098, 0.09700, 0.00563, 0.00680, 0.00802, 0.01689, 0.00339, 26.77500,
              0.422229, 0.741367, -7.348300, 0.177551, 1.743867, 0.085569)

# Creating a DataFrame for input data with the same feature names
input_data_df = pd.DataFrame([input_data], columns=X.columns)

# Standardize the data using the DataFrame
std_data = scaler.transform(input_data_df)

# Applying PCA to input data
input_data_pca = pca.transform(std_data)

# prediction using the hybrid model
prediction = hybrid_model.predict(input_data_pca)
print(prediction)

if (prediction[0] == 0):
    print("The Person does not have Parkinson's Disease")
else:
    print("The Person has Parkinson's Disease")
